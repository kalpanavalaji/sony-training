<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gst" version="1.0"/>
  <include name="GstBase" version="1.0"/>
  <package name="gstreamer-rtp-1.0"/>
  <c:include name="gst/rtp/rtp.h"/>
  <namespace name="GstRtp"
             version="1.0"
             shared-library="libgstrtp-1.0.so.0"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <record name="RTCPBuffer" c:type="GstRTCPBuffer">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="23">Note: The API in this module is not yet declared stable.

&lt;refsect2&gt;
&lt;para&gt;
The GstRTPCBuffer helper functions makes it easy to parse and create regular
#GstBuffer objects that contain compound RTCP packets. These buffers are typically
of 'application/x-rtcp' #GstCaps.
&lt;/para&gt;
&lt;para&gt;
An RTCP buffer consists of 1 or more #GstRTCPPacket structures that you can
retrieve with gst_rtcp_buffer_get_first_packet(). #GstRTCPPacket acts as a pointer
into the RTCP buffer; you can move to the next packet with
gst_rtcp_packet_move_to_next().
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <source-position filename="gstrtcpbuffer.h" line="183"/>
      <field name="buffer" writable="1">
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="map" writable="1">
        <type name="Gst.MapInfo" c:type="GstMapInfo"/>
      </field>
      <method name="add_packet" c:identifier="gst_rtcp_buffer_add_packet">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="433">Add a new packet of @type to @rtcp. @packet will point to the newly created
packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="442">%TRUE if the packet could be created. This function returns %FALSE
if the max mtu is exceeded for the buffer.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtcp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="435">a valid RTCP buffer</doc>
            <type name="RTCPBuffer" c:type="GstRTCPBuffer*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="436">the #GstRTCPType of the new packet</doc>
            <type name="RTCPType" c:type="GstRTCPType"/>
          </parameter>
          <parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="437">pointer to new packet</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_first_packet"
              c:identifier="gst_rtcp_buffer_get_first_packet">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="363">Initialize a new #GstRTCPPacket pointer that points to the first packet in
@rtcp.</doc>
        <source-position filename="gstrtcpbuffer.h" line="225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="371">TRUE if the packet existed in @rtcp.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtcp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="365">a valid RTCP buffer</doc>
            <type name="RTCPBuffer" c:type="GstRTCPBuffer*"/>
          </instance-parameter>
          <parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="366">a #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_packet_count"
              c:identifier="gst_rtcp_buffer_get_packet_count">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="287">Get the number of RTCP packets in @rtcp.</doc>
        <source-position filename="gstrtcpbuffer.h" line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="293">the number of RTCP packets in @rtcp.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtcp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="289">a valid RTCP buffer</doc>
            <type name="RTCPBuffer" c:type="GstRTCPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unmap" c:identifier="gst_rtcp_buffer_unmap">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="260">Finish @rtcp after being constructured. This function is usually called
after gst_rtcp_buffer_map() and after adding the RTCP items to the new buffer.

The function adjusts the size of @rtcp with the total length of all the
added packets.</doc>
        <source-position filename="gstrtcpbuffer.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtcp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="262">a buffer with an RTCP packet</doc>
            <type name="RTCPBuffer" c:type="GstRTCPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="map" c:identifier="gst_rtcp_buffer_map">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="236">Open @buffer for reading or writing, depending on @flags. The resulting RTCP
buffer state is stored in @rtcp.</doc>
        <source-position filename="gstrtcpbuffer.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="238">a buffer with an RTCP packet</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="239">flags for the mapping</doc>
            <type name="Gst.MapFlags" c:type="GstMapFlags"/>
          </parameter>
          <parameter name="rtcp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="240">resulting #GstRTCPBuffer</doc>
            <type name="RTCPBuffer" c:type="GstRTCPBuffer*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="gst_rtcp_buffer_new">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="212">Create a new buffer for constructing RTCP packets. The packet will have a
maximum size of @mtu.</doc>
        <source-position filename="gstrtcpbuffer.h" line="218"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="219">A newly allocated buffer.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="mtu" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="214">the maximum mtu size.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_copy_data"
                c:identifier="gst_rtcp_buffer_new_copy_data">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="73">Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.</doc>
        <source-position filename="gstrtcpbuffer.h" line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="82">A newly allocated buffer with a copy of @data and of size @len.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="75">data for the new buffer</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="76">the length of data</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_take_data"
                c:identifier="gst_rtcp_buffer_new_take_data">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="49">Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.</doc>
        <source-position filename="gstrtcpbuffer.h" line="212"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="58">A newly allocated buffer with @data and of size @len.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="51">data for the new buffer</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="52">the length of data</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="validate" c:identifier="gst_rtcp_buffer_validate">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="188">Check if the data pointed to by @buffer is a valid RTCP packet using
gst_rtcp_buffer_validate_data().</doc>
        <source-position filename="gstrtcpbuffer.h" line="216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="195">TRUE if @buffer is a valid RTCP packet.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="190">the buffer to validate</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </function>
      <function name="validate_data"
                c:identifier="gst_rtcp_buffer_validate_data">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="90">Check if the @data and @size point to the data of a valid RTCP (compound)
packet.
Use this function to validate a packet before using the other functions in
this module.</doc>
        <source-position filename="gstrtcpbuffer.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="100">TRUE if the data points to a valid RTCP packet.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="92">the data to validate</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="93">the length of @data to validate</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="RTCPFBType" c:type="GstRTCPFBType">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="62">Different types of feedback messages.</doc>
      <source-position filename="gstrtcpbuffer.h" line="103"/>
      <member name="fb_type_invalid"
              value="0"
              c:identifier="GST_RTCP_FB_TYPE_INVALID">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="64">Invalid type</doc>
      </member>
      <member name="rtpfb_type_nack"
              value="1"
              c:identifier="GST_RTCP_RTPFB_TYPE_NACK">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="65">Generic NACK</doc>
      </member>
      <member name="rtpfb_type_tmmbr"
              value="3"
              c:identifier="GST_RTCP_RTPFB_TYPE_TMMBR">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="66">Temporary Maximum Media Stream Bit Rate Request</doc>
      </member>
      <member name="rtpfb_type_tmmbn"
              value="4"
              c:identifier="GST_RTCP_RTPFB_TYPE_TMMBN">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="67">Temporary Maximum Media Stream Bit Rate
   Notification</doc>
      </member>
      <member name="rtpfb_type_rctp_sr_req"
              value="5"
              c:identifier="GST_RTCP_RTPFB_TYPE_RCTP_SR_REQ">
      </member>
      <member name="psfb_type_pli"
              value="1"
              c:identifier="GST_RTCP_PSFB_TYPE_PLI">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="71">Picture Loss Indication</doc>
      </member>
      <member name="psfb_type_sli"
              value="2"
              c:identifier="GST_RTCP_PSFB_TYPE_SLI">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="72">Slice Loss Indication</doc>
      </member>
      <member name="psfb_type_rpsi"
              value="3"
              c:identifier="GST_RTCP_PSFB_TYPE_RPSI">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="73">Reference Picture Selection Indication</doc>
      </member>
      <member name="psfb_type_afb"
              value="15"
              c:identifier="GST_RTCP_PSFB_TYPE_AFB">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="74">Application layer Feedback</doc>
      </member>
      <member name="psfb_type_fir"
              value="4"
              c:identifier="GST_RTCP_PSFB_TYPE_FIR">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="75">Full Intra Request Command</doc>
      </member>
      <member name="psfb_type_tstr"
              value="5"
              c:identifier="GST_RTCP_PSFB_TYPE_TSTR">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="76">Temporal-Spatial Trade-off Request</doc>
      </member>
      <member name="psfb_type_tstn"
              value="6"
              c:identifier="GST_RTCP_PSFB_TYPE_TSTN">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="77">Temporal-Spatial Trade-off Notification</doc>
      </member>
      <member name="psfb_type_vbcn"
              value="7"
              c:identifier="GST_RTCP_PSFB_TYPE_VBCN">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="78">Video Back Channel Message</doc>
      </member>
    </enumeration>
    <record name="RTCPPacket" c:type="GstRTCPPacket">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="187">Data structure that points to a packet at @offset in @buffer.
The size of the structure is made public to allow stack allocations.</doc>
      <source-position filename="gstrtcpbuffer.h" line="209"/>
      <field name="rtcp" writable="1">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="189">pointer to RTCP buffer</doc>
        <type name="RTCPBuffer" c:type="GstRTCPBuffer*"/>
      </field>
      <field name="offset" writable="1">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="190">offset of packet in buffer data</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="padding" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="count" readable="0" private="1">
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="type" readable="0" private="1">
        <type name="RTCPType" c:type="GstRTCPType"/>
      </field>
      <field name="length" readable="0" private="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="item_offset" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="item_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="entry_offset" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <method name="add_rb" c:identifier="gst_rtcp_packet_add_rb">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="868">Add a new report block to @packet with the given values.</doc>
        <source-position filename="gstrtcpbuffer.h" line="257"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="881">%TRUE if the packet was created. This function can return %FALSE if
the max MTU is exceeded or the number of report blocks is greater than
#GST_RTCP_MAX_RB_COUNT.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="870">a valid SR or RR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="871">data source being reported</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="fractionlost" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="872">fraction lost since last SR/RR</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="packetslost" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="873">the cumululative number of packets lost</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="exthighestseq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="874">the extended last sequence number received</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="jitter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="875">the interarrival jitter</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="lsr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="876">the last SR packet from this source</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="dlsr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="877">the delay since last SR packet</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="bye_add_ssrc" c:identifier="gst_rtcp_packet_bye_add_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1472">Add @ssrc to the BYE @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="287"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1479">%TRUE if the ssrc was added. This function can return %FALSE if
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1474">a valid BYE #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1475">an SSRC to add</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="bye_add_ssrcs"
              c:identifier="gst_rtcp_packet_bye_add_ssrcs">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1532">Adds @len SSRCs in @ssrc to BYE @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="288"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1540">%TRUE if the all the SSRCs were added. This function can return %FALSE if
the max MTU is exceeded or the number of sources blocks is greater than
#GST_RTCP_MAX_BYE_SSRC_COUNT.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1534">a valid BYE #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1535">an array of SSRCs to add</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1536">number of elements in @ssrc</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="bye_get_nth_ssrc"
              c:identifier="gst_rtcp_packet_bye_get_nth_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1428">Get the @nth SSRC of the BYE @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="286"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1435">The @nth SSRC of @packet.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1430">a valid BYE #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1431">the nth SSRC to get</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="bye_get_reason"
              c:identifier="gst_rtcp_packet_bye_get_reason">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1616">Get the reason in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="290"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1622">The reason for the BYE @packet or NULL if the packet did not contain
a reason string. The string must be freed with g_free() after usage.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1618">a valid BYE #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bye_get_reason_len"
              c:identifier="gst_rtcp_packet_bye_get_reason_len">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1587">Get the length of the reason string.</doc>
        <source-position filename="gstrtcpbuffer.h" line="289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1593">The length of the reason string or 0 when there is no reason string
present.</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1589">a valid BYE #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bye_get_ssrc_count"
              c:identifier="gst_rtcp_packet_bye_get_ssrc_count">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1411">Get the number of SSRC fields in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1417">The number of SSRC fields in @packet.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1413">a valid BYE #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="bye_set_reason"
              c:identifier="gst_rtcp_packet_bye_set_reason">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1658">Set the reason string to @reason in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="291"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1665">TRUE if the string could be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1660">a valid BYE #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1661">a reason string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fb_get_fci" c:identifier="gst_rtcp_packet_fb_get_fci">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="2074">Get the Feedback Control Information attached to a RTPFB or PSFB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="302"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="2080">a pointer to the FCI</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="2076">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fb_get_fci_length"
              c:identifier="gst_rtcp_packet_fb_get_fci_length">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="2016">Get the length of the Feedback Control Information attached to a
RTPFB or PSFB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="300"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="2023">The length of the FCI in 32-bit words.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="2018">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fb_get_media_ssrc"
              c:identifier="gst_rtcp_packet_fb_get_media_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1778">Get the media SSRC field of the RTPFB or PSFB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="296"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1784">the media SSRC.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1780">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fb_get_sender_ssrc"
              c:identifier="gst_rtcp_packet_fb_get_sender_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1724">Get the sender SSRC field of the RTPFB or PSFB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1730">the sender SSRC.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1726">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fb_get_type" c:identifier="gst_rtcp_packet_fb_get_type">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1832">Get the feedback message type of the FB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1838">The feedback message type.</doc>
          <type name="RTCPFBType" c:type="GstRTCPFBType"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1834">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fb_set_fci_length"
              c:identifier="gst_rtcp_packet_fb_set_fci_length">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="2041">Set the length of the Feedback Control Information attached to a
RTPFB or PSFB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="2049">%TRUE if there was enough space in the packet to add this much FCI</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="2043">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="wordlen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="2044">Length of the FCI in 32-bit words</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="fb_set_media_ssrc"
              c:identifier="gst_rtcp_packet_fb_set_media_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1807">Set the media SSRC field of the RTPFB or PSFB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="297"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1809">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1810">a media SSRC</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="fb_set_sender_ssrc"
              c:identifier="gst_rtcp_packet_fb_set_sender_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1753">Set the sender SSRC field of the RTPFB or PSFB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1755">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1756">a sender SSRC</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="fb_set_type" c:identifier="gst_rtcp_packet_fb_set_type">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1850">Set the feedback message type of the FB @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1852">a valid RTPFB or PSFB #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1853">the #GstRTCPFBType to set</doc>
            <type name="RTCPFBType" c:type="GstRTCPFBType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_count" c:identifier="gst_rtcp_packet_get_count">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="597">Get the count field in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="603">The count field in @packet or -1 if @packet does not point to a
valid packet.</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="599">a valid #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="gst_rtcp_packet_get_length">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="615">Get the length field of @packet. This is the length of the packet in
32-bit words minus one.</doc>
        <source-position filename="gstrtcpbuffer.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="622">The length field of @packet.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="617">a valid #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_padding" c:identifier="gst_rtcp_packet_get_padding">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="563">Get the packet padding of the packet pointed to by @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="569">If the packet has the padding bit set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="565">a valid #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rb" c:identifier="gst_rtcp_packet_get_rb">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="785">Parse the values of the @nth report block in @packet and store the result in
the values.</doc>
        <source-position filename="gstrtcpbuffer.h" line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="787">a valid SR or RR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="788">the nth report block in @packet</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="789">result for data source being reported</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="fractionlost" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="790">result for fraction lost since last SR/RR</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="packetslost" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="791">result for the cumululative number of packets lost</doc>
            <type name="gint32" c:type="gint32*"/>
          </parameter>
          <parameter name="exthighestseq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="792">result for the extended last sequence number received</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="jitter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="793">result for the interarrival jitter</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="lsr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="794">result for the last SR packet from this source</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="dlsr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="795">result for the delay since last SR packet</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rb_count" c:identifier="gst_rtcp_packet_get_rb_count">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="765">Get the number of report blocks in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="252"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="771">The number of report blocks in @packet.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="767">a valid SR or RR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type" c:identifier="gst_rtcp_packet_get_type">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="580">Get the packet type of the packet pointed to by @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="586">The packet type or GST_RTCP_TYPE_INVALID when @packet is not
pointing to a valid packet.</doc>
          <type name="RTCPType" c:type="GstRTCPType"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="582">a valid #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_to_next" c:identifier="gst_rtcp_packet_move_to_next">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="393">Move the packet pointer @packet to the next packet in the payload.
Use gst_rtcp_buffer_get_first_packet() to initialize @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="400">TRUE if @packet is pointing to a valid packet after calling this
function.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="395">a #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="gst_rtcp_packet_remove">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="526">Removes the packet pointed to by @packet and moves pointer to the next one</doc>
        <source-position filename="gstrtcpbuffer.h" line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="532">TRUE if @packet is pointing to a valid packet after calling this
function.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="528">a #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rr_get_ssrc" c:identifier="gst_rtcp_packet_rr_get_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="713">Get the ssrc field of the RR @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="719">the ssrc.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="715">a valid RR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rr_set_ssrc" c:identifier="gst_rtcp_packet_rr_set_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="741">Set the ssrc field of the RR @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="743">a valid RR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="744">the SSRC to set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_add_entry"
              c:identifier="gst_rtcp_packet_sdes_add_entry">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1346">Add a new SDES entry to the current item in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1355">%TRUE if the item could be added, %FALSE if the MTU has been
reached.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1348">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1349">the #GstRTCPSDESType of the SDES entry</doc>
            <type name="RTCPSDESType" c:type="GstRTCPSDESType"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1350">the data length</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1351">the data</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_add_item"
              c:identifier="gst_rtcp_packet_sdes_add_item">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1275">Add a new SDES item for @ssrc to @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="280"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1282">%TRUE if the item could be added, %FALSE if the maximum amount of
items has been exceeded for the SDES packet or the MTU has been reached.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1277">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1278">the SSRC of the new item to add</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_copy_entry"
              c:identifier="gst_rtcp_packet_sdes_copy_entry">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1240">This function is like gst_rtcp_packet_sdes_get_entry() but it returns a
null-terminated copy of the data instead. use g_free() after usage.</doc>
        <source-position filename="gstrtcpbuffer.h" line="276"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1250">%TRUE if there was valid data.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1242">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1243">result of the entry type</doc>
            <type name="RTCPSDESType" c:type="GstRTCPSDESType*"/>
          </parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1244">result length of the entry data</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1245">result entry data</doc>
            <array length="1" zero-terminated="0" c:type="guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_first_entry"
              c:identifier="gst_rtcp_packet_sdes_first_entry">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1105">Move to the first SDES entry in the current item.</doc>
        <source-position filename="gstrtcpbuffer.h" line="271"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1111">%TRUE if there was a first entry.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1107">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sdes_first_item"
              c:identifier="gst_rtcp_packet_sdes_first_item">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="998">Move to the first SDES item in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="268"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1004">TRUE if there was a first item.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1000">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sdes_get_entry"
              c:identifier="gst_rtcp_packet_sdes_get_entry">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1190">Get the data of the current SDES item entry. @type (when not NULL) will
contain the type of the entry. @data (when not NULL) will point to @len
bytes.

When @type refers to a text item, @data will point to a UTF8 string. Note
that this UTF8 string is NOT null-terminated. Use
gst_rtcp_packet_sdes_copy_entry() to get a null-terminated copy of the entry.</doc>
        <source-position filename="gstrtcpbuffer.h" line="273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1205">%TRUE if there was valid data.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1192">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1193">result of the entry type</doc>
            <type name="RTCPSDESType" c:type="GstRTCPSDESType*"/>
          </parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1194">result length of the entry data</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1195">result entry data</doc>
            <array length="1" zero-terminated="0" c:type="guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="sdes_get_item_count"
              c:identifier="gst_rtcp_packet_sdes_get_item_count">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="981">Get the number of items in the SDES packet @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="267"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="987">The number of items in @packet.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="983">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sdes_get_ssrc"
              c:identifier="gst_rtcp_packet_sdes_get_ssrc">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1075">Get the SSRC of the current SDES item.</doc>
        <source-position filename="gstrtcpbuffer.h" line="270"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1081">the SSRC of the current item.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1077">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sdes_next_entry"
              c:identifier="gst_rtcp_packet_sdes_next_entry">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1145">Move to the next SDES entry in the current item.</doc>
        <source-position filename="gstrtcpbuffer.h" line="272"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1151">%TRUE if there was a next entry.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1147">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="sdes_next_item"
              c:identifier="gst_rtcp_packet_sdes_next_item">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1022">Move to the next SDES item in @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1028">TRUE if there was a next item.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="1024">a valid SDES #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_rb" c:identifier="gst_rtcp_packet_set_rb">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="950">Set the @nth new report block in @packet with the given values.

Note: Not implemented.</doc>
        <source-position filename="gstrtcpbuffer.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="952">a valid SR or RR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="953">the nth report block to set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="954">data source being reported</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="fractionlost" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="955">fraction lost since last SR/RR</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="packetslost" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="956">the cumululative number of packets lost</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="exthighestseq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="957">the extended last sequence number received</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="jitter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="958">the interarrival jitter</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="lsr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="959">the last SR packet from this source</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="dlsr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="960">the delay since last SR packet</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="sr_get_sender_info"
              c:identifier="gst_rtcp_packet_sr_get_sender_info">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="633">Parse the SR sender info and store the values.</doc>
        <source-position filename="gstrtcpbuffer.h" line="240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="635">a valid SR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="636">result SSRC</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="ntptime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="637">result NTP time</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
          <parameter name="rtptime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="638">result RTP time</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="packet_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="639">result packet count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="octet_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="640">result octet count</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sr_set_sender_info"
              c:identifier="gst_rtcp_packet_sr_set_sender_info">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="676">Set the given values in the SR packet @packet.</doc>
        <source-position filename="gstrtcpbuffer.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="packet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="678">a valid SR #GstRTCPPacket</doc>
            <type name="RTCPPacket" c:type="GstRTCPPacket*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="679">the SSRC</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="ntptime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="680">the NTP time</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="rtptime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="681">the RTP time</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="packet_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="682">the packet count</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="octet_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtcpbuffer.c"
                 line="683">the octet count</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RTCPSDESType" c:type="GstRTCPSDESType">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="105">Different types of SDES content.</doc>
      <source-position filename="gstrtcpbuffer.h" line="132"/>
      <member name="invalid" value="-1" c:identifier="GST_RTCP_SDES_INVALID">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="107">Invalid SDES entry</doc>
      </member>
      <member name="end" value="0" c:identifier="GST_RTCP_SDES_END">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="108">End of SDES list</doc>
      </member>
      <member name="cname" value="1" c:identifier="GST_RTCP_SDES_CNAME">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="109">Canonical name</doc>
      </member>
      <member name="name" value="2" c:identifier="GST_RTCP_SDES_NAME">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="110">User name</doc>
      </member>
      <member name="email" value="3" c:identifier="GST_RTCP_SDES_EMAIL">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="111">User's electronic mail address</doc>
      </member>
      <member name="phone" value="4" c:identifier="GST_RTCP_SDES_PHONE">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="112">User's phone number</doc>
      </member>
      <member name="loc" value="5" c:identifier="GST_RTCP_SDES_LOC">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="113">Geographic user location</doc>
      </member>
      <member name="tool" value="6" c:identifier="GST_RTCP_SDES_TOOL">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="114">Name of application or tool</doc>
      </member>
      <member name="note" value="7" c:identifier="GST_RTCP_SDES_NOTE">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="115">Notice about the source</doc>
      </member>
      <member name="priv" value="8" c:identifier="GST_RTCP_SDES_PRIV">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="116">Private extensions</doc>
      </member>
    </enumeration>
    <enumeration name="RTCPType" c:type="GstRTCPType">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="37">Different RTCP packet types.</doc>
      <source-position filename="gstrtcpbuffer.h" line="60"/>
      <member name="invalid" value="0" c:identifier="GST_RTCP_TYPE_INVALID">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="39">Invalid type</doc>
      </member>
      <member name="sr" value="200" c:identifier="GST_RTCP_TYPE_SR">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="40">Sender report</doc>
      </member>
      <member name="rr" value="201" c:identifier="GST_RTCP_TYPE_RR">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="41">Receiver report</doc>
      </member>
      <member name="sdes" value="202" c:identifier="GST_RTCP_TYPE_SDES">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="42">Source description</doc>
      </member>
      <member name="bye" value="203" c:identifier="GST_RTCP_TYPE_BYE">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="43">Goodbye</doc>
      </member>
      <member name="app" value="204" c:identifier="GST_RTCP_TYPE_APP">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="44">Application defined</doc>
      </member>
      <member name="rtpfb" value="205" c:identifier="GST_RTCP_TYPE_RTPFB">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="45">Transport layer feedback.</doc>
      </member>
      <member name="psfb" value="206" c:identifier="GST_RTCP_TYPE_PSFB">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.h"
             line="46">Payload-specific feedback.</doc>
      </member>
    </enumeration>
    <constant name="RTCP_MAX_BYE_SSRC_COUNT"
              value="31"
              c:type="GST_RTCP_MAX_BYE_SSRC_COUNT">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="155">The maximum amount of SSRCs in a BYE packet.</doc>
      <source-position filename="gstrtcpbuffer.h" line="160"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTCP_MAX_RB_COUNT"
              value="31"
              c:type="GST_RTCP_MAX_RB_COUNT">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="141">The maximum amount of Receiver report blocks in RR and SR messages.</doc>
      <source-position filename="gstrtcpbuffer.h" line="146"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTCP_MAX_SDES" value="255" c:type="GST_RTCP_MAX_SDES">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="134">The maximum text length for an SDES item.</doc>
      <source-position filename="gstrtcpbuffer.h" line="139"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTCP_MAX_SDES_ITEM_COUNT"
              value="31"
              c:type="GST_RTCP_MAX_SDES_ITEM_COUNT">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="148">The maximum amount of SDES items.</doc>
      <source-position filename="gstrtcpbuffer.h" line="153"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTCP_VALID_MASK"
              value="57598"
              c:type="GST_RTCP_VALID_MASK">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="162">Mask for version, padding bit and packet type pair</doc>
      <source-position filename="gstrtcpbuffer.h" line="167"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTCP_VALID_VALUE"
              value="200"
              c:type="GST_RTCP_VALID_VALUE">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="168">Valid value for the first two bytes of an RTCP packet after applying
#GST_RTCP_VALID_MASK to them.</doc>
      <source-position filename="gstrtcpbuffer.h" line="174"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTCP_VERSION" value="2" c:type="GST_RTCP_VERSION">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.h"
           line="30">The supported RTCP version 2.</doc>
      <source-position filename="gstrtcpbuffer.h" line="35"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="RTPBaseAudioPayload"
           c:symbol-prefix="rtp_base_audio_payload"
           c:type="GstRTPBaseAudioPayload"
           parent="RTPBasePayload"
           glib:type-name="GstRTPBaseAudioPayload"
           glib:get-type="gst_rtp_base_audio_payload_get_type"
           glib:type-struct="RTPBaseAudioPayloadClass">
      <doc xml:space="preserve"
           filename="gstrtpbaseaudiopayload.c"
           line="20">Provides a base class for audio RTP payloaders for frame or sample based
audio codecs (constant bitrate)

This class derives from GstRTPBasePayload. It can be used for payloading
audio codecs. It will only work with constant bitrate codecs. It supports
both frame based and sample based codecs. It takes care of packing up the
audio data into RTP packets and filling up the headers accordingly. The
payloading is done based on the maximum MTU (mtu) and the maximum time per
packet (max-ptime). The general idea is to divide large data buffers into
smaller RTP packets. The RTP packet size is the minimum of either the MTU,
max-ptime (if set) or available data. The RTP packet size is always larger or
equal to min-ptime (if set). If min-ptime is not set, any residual data is
sent in a last RTP packet. In the case of frame based codecs, the resulting
RTP packets always contain full frames.

&lt;refsect2&gt;
&lt;title&gt;Usage&lt;/title&gt;
&lt;para&gt;
To use this base class, your child element needs to call either
gst_rtp_base_audio_payload_set_frame_based() or
gst_rtp_base_audio_payload_set_sample_based(). This is usually done in the
element's _init() function. Then, the child element must call either
gst_rtp_base_audio_payload_set_frame_options(),
gst_rtp_base_audio_payload_set_sample_options() or
gst_rtp_base_audio_payload_set_samplebits_options. Since
GstRTPBaseAudioPayload derives from GstRTPBasePayload, the child element
must set any variables or call/override any functions required by that base
class. The child element does not need to override any other functions
specific to GstRTPBaseAudioPayload.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <source-position filename="gstrtpbaseaudiopayload.h" line="77"/>
      <method name="flush" c:identifier="gst_rtp_base_audio_payload_flush">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="545">Create an RTP buffer and store @payload_len bytes of the adapter as the
payload. Set the timestamp on the new buffer to @timestamp before pushing
the buffer downstream.

If @payload_len is -1, all pending bytes will be flushed. If @timestamp is
-1, the timestamp will be calculated automatically.</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbaseaudiopayload.c"
               line="558">a #GstFlowReturn</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="baseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="547">a #GstRTPBasePayload</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
          <parameter name="payload_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="548">length of payload</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="549">a #GstClockTime</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adapter"
              c:identifier="gst_rtp_base_audio_payload_get_adapter">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="972">Gets the internal adapter used by the depayloader.</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbaseaudiopayload.c"
               line="978">a #GstAdapter.</doc>
          <type name="GstBase.Adapter" c:type="GstAdapter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtpbaseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="974">a #GstRTPBaseAudioPayload</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="gst_rtp_base_audio_payload_push">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="434">Create an RTP buffer and store @payload_len bytes of @data as the
payload. Set the timestamp on the new buffer to @timestamp before pushing
the buffer downstream.</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbaseaudiopayload.c"
               line="445">a #GstFlowReturn</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="baseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="436">a #GstRTPBasePayload</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="437">data to set as payload</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="payload_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="438">length of payload</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="439">a #GstClockTime</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_frame_based"
              c:identifier="gst_rtp_base_audio_payload_set_frame_based">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="266">Tells #GstRTPBaseAudioPayload that the child element is for a frame based
audio codec</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtpbaseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="268">a pointer to the element.</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_frame_options"
              c:identifier="gst_rtp_base_audio_payload_set_frame_options">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="314">Sets the options for frame based audio codecs.</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtpbaseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="316">a pointer to the element.</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
          <parameter name="frame_duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="317">The duraction of an audio frame in milliseconds.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="frame_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="318">The size of an audio frame in bytes.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sample_based"
              c:identifier="gst_rtp_base_audio_payload_set_sample_based">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="290">Tells #GstRTPBaseAudioPayload that the child element is for a sample based
audio codec</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtpbaseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="292">a pointer to the element.</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_sample_options"
              c:identifier="gst_rtp_base_audio_payload_set_sample_options">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="344">Sets the options for sample based audio codecs.</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtpbaseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="346">a pointer to the element.</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
          <parameter name="sample_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="347">Size per sample in bytes.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_samplebits_options"
              c:identifier="gst_rtp_base_audio_payload_set_samplebits_options">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.c"
             line="362">Sets the options for sample based audio codecs.</doc>
        <source-position filename="gstrtpbaseaudiopayload.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtpbaseaudiopayload"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="364">a pointer to the element.</doc>
            <type name="RTPBaseAudioPayload" c:type="GstRTPBaseAudioPayload*"/>
          </instance-parameter>
          <parameter name="sample_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbaseaudiopayload.c"
                 line="365">Size per sample in bits.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer-list" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="payload">
        <type name="RTPBasePayload" c:type="GstRTPBasePayload"/>
      </field>
      <field name="priv">
        <type name="RTPBaseAudioPayloadPrivate"
              c:type="GstRTPBaseAudioPayloadPrivate*"/>
      </field>
      <field name="base_ts">
        <type name="Gst.ClockTime" c:type="GstClockTime"/>
      </field>
      <field name="frame_size">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="frame_duration">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="sample_size">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="RTPBaseAudioPayloadClass"
            c:type="GstRTPBaseAudioPayloadClass"
            glib:is-gtype-struct-for="RTPBaseAudioPayload">
      <doc xml:space="preserve"
           filename="gstrtpbaseaudiopayload.h"
           line="65">Base class for audio RTP payloader.</doc>
      <source-position filename="gstrtpbaseaudiopayload.h" line="77"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gstrtpbaseaudiopayload.h"
             line="67">the parent class</doc>
        <type name="RTPBasePayloadClass" c:type="GstRTPBasePayloadClass"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="RTPBaseAudioPayloadPrivate"
            c:type="GstRTPBaseAudioPayloadPrivate"
            disguised="1">
      <source-position filename="gstrtpbaseaudiopayload.h" line="32"/>
    </record>
    <class name="RTPBaseDepayload"
           c:symbol-prefix="rtp_base_depayload"
           c:type="GstRTPBaseDepayload"
           parent="Gst.Element"
           abstract="1"
           glib:type-name="GstRTPBaseDepayload"
           glib:get-type="gst_rtp_base_depayload_get_type"
           glib:type-struct="RTPBaseDepayloadClass">
      <doc xml:space="preserve"
           filename="gstrtpbasedepayload.c"
           line="21">Provides a base class for RTP depayloaders</doc>
      <source-position filename="gstrtpbasedepayload.h" line="100"/>
      <virtual-method name="handle_event">
        <source-position filename="gstrtpbasedepayload.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="packet_lost">
        <source-position filename="gstrtpbasedepayload.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process">
        <source-position filename="gstrtpbasedepayload.h" line="87"/>
        <return-value transfer-ownership="full">
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="base" transfer-ownership="none">
            <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
          </instance-parameter>
          <parameter name="in" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_caps">
        <source-position filename="gstrtpbasedepayload.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="push" c:identifier="gst_rtp_base_depayload_push">
        <doc xml:space="preserve"
             filename="gstrtpbasedepayload.c"
             line="664">Push @out_buf to the peer of @filter. This function takes ownership of
@out_buf.

This function will by default apply the last incomming timestamp on
the outgoing buffer when it didn't have a timestamp already.</doc>
        <source-position filename="gstrtpbasedepayload.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbasedepayload.c"
               line="675">a #GstFlowReturn.</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasedepayload.c"
                 line="666">a #GstRTPBaseDepayload</doc>
            <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
          </instance-parameter>
          <parameter name="out_buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasedepayload.c"
                 line="667">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_list" c:identifier="gst_rtp_base_depayload_push_list">
        <doc xml:space="preserve"
             filename="gstrtpbasedepayload.c"
             line="692">Push @out_list to the peer of @filter. This function takes ownership of
@out_list.</doc>
        <source-position filename="gstrtpbasedepayload.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbasedepayload.c"
               line="700">a #GstFlowReturn.</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasedepayload.c"
                 line="694">a #GstRTPBaseDepayload</doc>
            <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
          </instance-parameter>
          <parameter name="out_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasedepayload.c"
                 line="695">a #GstBufferList</doc>
            <type name="Gst.BufferList" c:type="GstBufferList*"/>
          </parameter>
        </parameters>
      </method>
      <property name="stats" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbasedepayload.c"
             line="138">Various depayloader statistics retrieved atomically (and are therefore
synchroized with each other). This property return a GstStructure named
application/x-rtp-depayload-stats containing the following fields relating to
the last processed buffer and current state of the stream being depayloaded:

&lt;variablelist&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;clock-rate&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, clock-rate of the
    stream&lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;npt-start&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT64, time of playback start
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;npt-stop&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT64, time of playback stop
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;play-speed&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_DOUBLE, the playback speed
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;play-scale&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_DOUBLE, the playback scale
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;running-time-dts&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT64, the last running-time of the
     last DTS
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;running-time-pts&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT64, the last running-time of the
     last PTS
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;seqnum&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, the last seen seqnum
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;timestamp&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, the last seen RTP timestamp
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
&lt;/variablelist&gt;</doc>
        <type name="Gst.Structure"/>
      </property>
      <field name="parent">
        <type name="Gst.Element" c:type="GstElement"/>
      </field>
      <field name="sinkpad">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="srcpad">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="clock_rate">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="segment">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="need_newsegment">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RTPBaseDepayloadPrivate"
              c:type="GstRTPBaseDepayloadPrivate*"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="RTPBaseDepayloadClass"
            c:type="GstRTPBaseDepayloadClass"
            glib:is-gtype-struct-for="RTPBaseDepayload">
      <doc xml:space="preserve"
           filename="gstrtpbasedepayload.h"
           line="65">Base class for audio RTP payloader.</doc>
      <source-position filename="gstrtpbasedepayload.h" line="100"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gstrtpbasedepayload.h"
             line="67">the parent class</doc>
        <type name="Gst.ElementClass" c:type="GstElementClass"/>
      </field>
      <field name="set_caps">
        <callback name="set_caps">
          <source-position filename="gstrtpbasedepayload.h" line="80"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
            </parameter>
            <parameter name="caps" transfer-ownership="none">
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process">
        <callback name="process">
          <source-position filename="gstrtpbasedepayload.h" line="87"/>
          <return-value transfer-ownership="full">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </return-value>
          <parameters>
            <parameter name="base" transfer-ownership="none">
              <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
            </parameter>
            <parameter name="in" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="packet_lost">
        <callback name="packet_lost">
          <source-position filename="gstrtpbasedepayload.h" line="92"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_event">
        <callback name="handle_event">
          <source-position filename="gstrtpbasedepayload.h" line="96"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="filter" transfer-ownership="none">
              <type name="RTPBaseDepayload" c:type="GstRTPBaseDepayload*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="RTPBaseDepayloadPrivate"
            c:type="GstRTPBaseDepayloadPrivate"
            disguised="1">
      <source-position filename="gstrtpbasedepayload.h" line="45"/>
    </record>
    <class name="RTPBasePayload"
           c:symbol-prefix="rtp_base_payload"
           c:type="GstRTPBasePayload"
           parent="Gst.Element"
           abstract="1"
           glib:type-name="GstRTPBasePayload"
           glib:get-type="gst_rtp_base_payload_get_type"
           glib:type-struct="RTPBasePayloadClass">
      <doc xml:space="preserve"
           filename="gstrtpbasepayload.c"
           line="15">Provides a base class for RTP payloaders</doc>
      <source-position filename="gstrtpbasepayload.h" line="146"/>
      <virtual-method name="get_caps">
        <source-position filename="gstrtpbasepayload.h" line="131"/>
        <return-value transfer-ownership="full">
          <type name="Gst.Caps" c:type="GstCaps*"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="pad" transfer-ownership="none">
            <type name="Gst.Pad" c:type="GstPad*"/>
          </parameter>
          <parameter name="filter" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_buffer">
        <source-position filename="gstrtpbasepayload.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query">
        <source-position filename="gstrtpbasepayload.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="pad" transfer-ownership="none">
            <type name="Gst.Pad" c:type="GstPad*"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="Gst.Query" c:type="GstQuery*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_caps">
        <source-position filename="gstrtpbasepayload.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="caps" transfer-ownership="none">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sink_event">
        <source-position filename="gstrtpbasepayload.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="src_event">
        <source-position filename="gstrtpbasepayload.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <type name="Gst.Event" c:type="GstEvent*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="is_filled" c:identifier="gst_rtp_base_payload_is_filled">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="912">Check if the packet with @size and @duration would exceed the configured
maximum size.</doc>
        <source-position filename="gstrtpbasepayload.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbasepayload.c"
               line="921">%TRUE if the packet of @size and @duration would exceed the
configured MTU or max_ptime.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="914">a #GstRTPBasePayload</doc>
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="915">the size of the packet</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="916">the duration of the packet</doc>
            <type name="Gst.ClockTime" c:type="GstClockTime"/>
          </parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="gst_rtp_base_payload_push">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="1154">Push @buffer to the peer element of the payloader. The SSRC, payload type,
seqnum and timestamp of the RTP buffer will be updated first.

This function takes ownership of @buffer.</doc>
        <source-position filename="gstrtpbasepayload.h" line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbasepayload.c"
               line="1164">a #GstFlowReturn.</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="1156">a #GstRTPBasePayload</doc>
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="1157">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_list" c:identifier="gst_rtp_base_payload_push_list">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="1120">Push @list to the peer element of the payloader. The SSRC, payload type,
seqnum and timestamp of the RTP buffer will be updated first.

This function takes ownership of @list.</doc>
        <source-position filename="gstrtpbasepayload.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbasepayload.c"
               line="1130">a #GstFlowReturn.</doc>
          <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="1122">a #GstRTPBasePayload</doc>
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="1123">a #GstBufferList</doc>
            <type name="Gst.BufferList" c:type="GstBufferList*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_options"
              c:identifier="gst_rtp_base_payload_set_options">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="675">Set the rtp options of the payloader. These options will be set in the caps
of the payloader. Subclasses must call this method before calling
gst_rtp_base_payload_push() or gst_rtp_base_payload_set_outcaps().</doc>
        <source-position filename="gstrtpbasepayload.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="677">a #GstRTPBasePayload</doc>
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="678">the media type (typically "audio" or "video")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dynamic" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="679">if the payload type is dynamic</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="encoding_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="680">the encoding name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="clock_rate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="681">the clock rate of the media</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_outcaps"
              c:identifier="gst_rtp_base_payload_set_outcaps"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="727">Configure the output caps with the optional parameters.

Variable arguments should be in the form field name, field type
(as a GType), value(s).  The last variable argument should be NULL.</doc>
        <source-position filename="gstrtpbasepayload.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbasepayload.c"
               line="738">%TRUE if the caps could be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="payload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="729">a #GstRTPBasePayload</doc>
            <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
          </instance-parameter>
          <parameter name="fieldname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="730">the first field name or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbasepayload.c"
                 line="731">field values</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <property name="max-ptime" writable="1" transfer-ownership="none">
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="min-ptime" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="212">Minimum duration of the packet data in ns (can't go above MTU)</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="mtu" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="perfect-rtptime" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="232">Try to use the offset fields to generate perfect RTP timestamps. When this
option is disabled, RTP timestamps are generated from GST_BUFFER_PTS of
each payloaded buffer. The PTSes of buffers may not necessarily increment
with the amount of data in each input buffer, consider e.g. the case where
the buffer arrives from a network which means that the PTS is unrelated to
the amount of data. Because the RTP timestamps are generated from
GST_BUFFER_PTS this can result in RTP timestamps that also don't increment
with the amount of data in the payloaded packet. To circumvent this it is
possible to set the perfect rtptime option enabled. When this option is
enabled the payloader will increment the RTP timestamps based on
GST_BUFFER_OFFSET which relates to the amount of data in each packet
rather than the GST_BUFFER_PTS of each buffer and therefore the RTP
timestamps will more closely correlate with the amount of data in each
buffer. Currently GstRTPBasePayload is limited to handling perfect RTP
timestamps for audio streams.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pt" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ptime-multiple" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="255">Force buffers to be multiples of this duration in ns (0 disables)</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="seqnum" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="seqnum-offset" writable="1" transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="ssrc" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="stats" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.c"
             line="266">Various payloader statistics retrieved atomically (and are therefore
synchroized with each other), these can be used e.g. to generate an
RTP-Info header. This property return a GstStructure named
application/x-rtp-payload-stats containing the following fields relating to
the last processed buffer and current state of the stream being payloaded:

&lt;variablelist&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;clock-rate&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, clock-rate of the
    stream&lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;running-time&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT64, running time
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;seqnum&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, sequence number, same as
    #GstRTPBasePayload:seqnum&lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;timestamp&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, RTP timestamp, same as
    #GstRTPBasePayload:timestamp&lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;ssrc&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, The SSRC in use
    &lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;pt&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, The Payload type in use, same as
    #GstRTPBasePayload:pt&lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;seqnum-offset&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, The current offset added to the
    seqnum&lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
  &lt;varlistentry&gt;
    &lt;term&gt;timestamp-offset&lt;/term&gt;
    &lt;listitem&gt;&lt;para&gt;#G_TYPE_UINT, The current offset added to the
    timestamp&lt;/para&gt;&lt;/listitem&gt;
  &lt;/varlistentry&gt;
&lt;/variablelist&gt;</doc>
        <type name="Gst.Structure"/>
      </property>
      <property name="timestamp" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="timestamp-offset" writable="1" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="element">
        <type name="Gst.Element" c:type="GstElement"/>
      </field>
      <field name="sinkpad" readable="0" private="1">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="srcpad" readable="0" private="1">
        <type name="Gst.Pad" c:type="GstPad*"/>
      </field>
      <field name="ts_base" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="seqnum_base" readable="0" private="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="media" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="encoding_name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="dynamic" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="clock_rate" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="ts_offset" readable="0" private="1">
        <type name="gint32" c:type="gint32"/>
      </field>
      <field name="timestamp" readable="0" private="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="seqnum_offset" readable="0" private="1">
        <type name="gint16" c:type="gint16"/>
      </field>
      <field name="seqnum" readable="0" private="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="max_ptime" readable="0" private="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="pt" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="ssrc" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="current_ssrc" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="mtu" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="segment" readable="0" private="1">
        <type name="Gst.Segment" c:type="GstSegment"/>
      </field>
      <field name="min_ptime" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="ptime" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="ptime_multiple" readable="0" private="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RTPBasePayloadPrivate" c:type="GstRTPBasePayloadPrivate*"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="RTPBasePayloadClass"
            c:type="GstRTPBasePayloadClass"
            glib:is-gtype-struct-for="RTPBasePayload">
      <doc xml:space="preserve"
           filename="gstrtpbasepayload.h"
           line="114">Base class for audio RTP payloader.</doc>
      <source-position filename="gstrtpbasepayload.h" line="146"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="gstrtpbasepayload.h"
             line="116">the parent class</doc>
        <type name="Gst.ElementClass" c:type="GstElementClass"/>
      </field>
      <field name="get_caps">
        <callback name="get_caps">
          <source-position filename="gstrtpbasepayload.h" line="131"/>
          <return-value transfer-ownership="full">
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
            </parameter>
            <parameter name="pad" transfer-ownership="none">
              <type name="Gst.Pad" c:type="GstPad*"/>
            </parameter>
            <parameter name="filter" transfer-ownership="none">
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_caps">
        <callback name="set_caps">
          <source-position filename="gstrtpbasepayload.h" line="133"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
            </parameter>
            <parameter name="caps" transfer-ownership="none">
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_buffer">
        <callback name="handle_buffer">
          <source-position filename="gstrtpbasepayload.h" line="137"/>
          <return-value transfer-ownership="none">
            <type name="Gst.FlowReturn" c:type="GstFlowReturn"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Gst.Buffer" c:type="GstBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sink_event">
        <callback name="sink_event">
          <source-position filename="gstrtpbasepayload.h" line="140"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="src_event">
        <callback name="src_event">
          <source-position filename="gstrtpbasepayload.h" line="141"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
            </parameter>
            <parameter name="event" transfer-ownership="none">
              <type name="Gst.Event" c:type="GstEvent*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query">
        <callback name="query">
          <source-position filename="gstrtpbasepayload.h" line="142"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="payload" transfer-ownership="none">
              <type name="RTPBasePayload" c:type="GstRTPBasePayload*"/>
            </parameter>
            <parameter name="pad" transfer-ownership="none">
              <type name="Gst.Pad" c:type="GstPad*"/>
            </parameter>
            <parameter name="query" transfer-ownership="none">
              <type name="Gst.Query" c:type="GstQuery*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="RTPBasePayloadPrivate"
            c:type="GstRTPBasePayloadPrivate"
            disguised="1">
      <source-position filename="gstrtpbasepayload.h" line="43"/>
    </record>
    <record name="RTPBuffer" c:type="GstRTPBuffer">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="21">&lt;refsect2&gt;
&lt;para&gt;
The GstRTPBuffer helper functions makes it easy to parse and create regular
#GstBuffer objects that contain RTP payloads. These buffers are typically of
'application/x-rtp' #GstCaps.
&lt;/para&gt;
&lt;/refsect2&gt;</doc>
      <source-position filename="gstrtpbuffer.h" line="60"/>
      <field name="buffer" writable="1">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.h"
             line="44">pointer to RTP buffer</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </field>
      <field name="state" writable="1">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.h"
             line="45">internal state</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="data" writable="1">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.h"
             line="46">array of data</doc>
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <field name="size" writable="1">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.h"
             line="47">array of size</doc>
        <array zero-terminated="0" fixed-size="4">
          <type name="gsize" c:type="gsize"/>
        </array>
      </field>
      <field name="map" writable="1">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.h"
             line="48">array of #GstMapInfo</doc>
        <array zero-terminated="0" fixed-size="4">
          <type name="Gst.MapInfo" c:type="GstMapInfo"/>
        </array>
      </field>
      <method name="add_extension_onebyte_header"
              c:identifier="gst_rtp_buffer_add_extension_onebyte_header">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1458">Adds a RFC 5285 header extension with a one byte header to the end of the
RTP header. If there is already a RFC 5285 header extension with a one byte
header, the new extension will be appended.
It will not work if there is already a header extension that does not follow
the mecanism described in RFC 5285 or if there is a header extension with
a two bytes header as described in RFC 5285. In that case, use
gst_rtp_buffer_add_extension_twobytes_header()</doc>
        <source-position filename="gstrtpbuffer.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1473">%TRUE if header extension could be added</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1460">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1461">The ID of the header extension (between 1 and 14).</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1462">location for data</doc>
            <array length="2" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1463">the size of the data in bytes</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_extension_twobytes_header"
              c:identifier="gst_rtp_buffer_add_extension_twobytes_header">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1556">Adds a RFC 5285 header extension with a two bytes header to the end of the
RTP header. If there is already a RFC 5285 header extension with a two bytes
header, the new extension will be appended.
It will not work if there is already a header extension that does not follow
the mecanism described in RFC 5285 or if there is a header extension with
a one byte header as described in RFC 5285. In that case, use
gst_rtp_buffer_add_extension_onebyte_header()</doc>
        <source-position filename="gstrtpbuffer.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1572">%TRUE if header extension could be added</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1558">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="appbits" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1559">Application specific bits</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1560">The ID of the header extension</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1561">location for data</doc>
            <array length="3" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1562">the size of the data in bytes</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_csrc" c:identifier="gst_rtp_buffer_get_csrc">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="889">Get the CSRC at index @idx in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="896">the CSRC at index @idx in host order.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="891">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="892">the index of the CSRC to get</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_csrc_count"
              c:identifier="gst_rtp_buffer_get_csrc_count">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="875">Get the CSRC count of the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="881">the CSRC count of @buffer.</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="877">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extension" c:identifier="gst_rtp_buffer_get_extension">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="640">Check if the extension bit is set on the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="646">TRUE if @buffer has the extension bit set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="642">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extension_bytes"
              c:identifier="gst_rtp_buffer_get_extension_bytes"
              shadows="get_extension_data"
              version="1.2">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="705">Similar to gst_rtp_buffer_get_extension_data, but more suitable for language
bindings usage. @bits will contain the extension 16 bits of custom data and
the extension data (not including the extension header) is placed in a new
#GBytes structure.

If @rtp did not contain an extension, this function will return %NULL, with
@bits unchanged. If there is an extension header but no extension data then
an empty #GBytes will be returned.</doc>
        <source-position filename="gstrtpbuffer.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="719">A new #GBytes if an extension header was present
and %NULL otherwise.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="707">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="bits"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="708">location for header bits</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extension_data"
              c:identifier="gst_rtp_buffer_get_extension_data"
              shadowed-by="get_extension_bytes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="667">Get the extension data. @bits will contain the extension 16 bits of custom
data. @data will point to the data in the extension and @wordlen will contain
the length of @data in 32 bits words.

If @buffer did not contain an extension, this function will return %FALSE
with @bits, @data and @wordlen unchanged.</doc>
        <source-position filename="gstrtpbuffer.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="681">TRUE if @buffer had the extension bit set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="669">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="bits"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="670">location for result bits</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="671">location for data</doc>
            <array zero-terminated="0" c:type="gpointer*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="wordlen"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="672">location for length of @data in 32 bits words</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extension_onebyte_header"
              c:identifier="gst_rtp_buffer_get_extension_onebyte_header">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1267">Parses RFC 5285 style header extensions with a one byte header. It will
return the nth extension with the requested id.</doc>
        <source-position filename="gstrtpbuffer.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1279">TRUE if @buffer had the requested header extension</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1269">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1270">The ID of the header extension to be read (between 1 and 14).</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1271">Read the nth extension packet with the requested ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1272">
  location for data</doc>
            <array length="3" zero-terminated="0" c:type="gpointer*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1274">the size of the data in bytes</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extension_twobytes_header"
              c:identifier="gst_rtp_buffer_get_extension_twobytes_header">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1345">Parses RFC 5285 style header extensions with a two bytes header. It will
return the nth extension with the requested id.</doc>
        <source-position filename="gstrtpbuffer.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1358">TRUE if @buffer had the requested header extension</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1347">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="appbits"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1348">Application specific bits</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1349">The ID of the header extension to be read (between 1 and 14).</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1350">Read the nth extension packet with the requested ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1351">
  location for data</doc>
            <array length="4" zero-terminated="0" c:type="gpointer*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1353">the size of the data in bytes</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_header_len"
              c:identifier="gst_rtp_buffer_get_header_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="544">Return the total length of the header in @buffer. This include the length of
the fixed header, the CSRC list and the extension header.</doc>
        <source-position filename="gstrtpbuffer.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="551">The total length of the header in @buffer.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="546">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_marker" c:identifier="gst_rtp_buffer_get_marker">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="930">Check if the marker bit is set on the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="936">TRUE if @buffer has the marker bit set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="932">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_packet_len"
              c:identifier="gst_rtp_buffer_get_packet_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="530">Return the total length of the packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="536">The total length of the packet in @buffer.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="532">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_padding" c:identifier="gst_rtp_buffer_get_padding">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="588">Check if the padding bit is set on the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="594">TRUE if @buffer has the padding bit set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="590">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_payload"
              c:identifier="gst_rtp_buffer_get_payload"
              shadowed-by="get_payload_bytes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1114">Get a pointer to the payload data in @buffer. This pointer is valid as long
as a reference to @buffer is held.</doc>
        <source-position filename="gstrtpbuffer.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1121">A pointer
to the payload data in @buffer.</doc>
          <array zero-terminated="0" c:type="gpointer">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1116">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_payload_buffer"
              c:identifier="gst_rtp_buffer_get_payload_buffer">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1083">Create a buffer of the payload of the RTP packet in @buffer. This function
will internally create a subbuffer of @buffer so that a memcpy can be
avoided.</doc>
        <source-position filename="gstrtpbuffer.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1091">A new buffer with the data of the payload.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1085">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_payload_bytes"
              c:identifier="gst_rtp_buffer_get_payload_bytes"
              shadows="get_payload"
              version="1.2">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1150">Similar to gst_rtp_buffer_get_payload, but more suitable for language
bindings usage. The return value is a pointer to a #GBytes structure
containing the payload data in @rtp.</doc>
        <source-position filename="gstrtpbuffer.h" line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1158">A new #GBytes containing the payload data in @rtp.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1152">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_payload_len"
              c:identifier="gst_rtp_buffer_get_payload_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1099">Get the length of the payload of the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1105">The length of the payload in @buffer.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1101">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_payload_subbuffer"
              c:identifier="gst_rtp_buffer_get_payload_subbuffer">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1041">Create a subbuffer of the payload of the RTP packet in @buffer. @offset bytes
are skipped in the payload and the subbuffer will be of size @len.
If @len is -1 the total payload starting from @offset is subbuffered.</doc>
        <source-position filename="gstrtpbuffer.h" line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1051">A new buffer with the specified data of the payload.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1043">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1044">the offset in the payload</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1045">the length in the payload</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_payload_type"
              c:identifier="gst_rtp_buffer_get_payload_type">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="957">Get the payload type of the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="963">The payload type.</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="959">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seq" c:identifier="gst_rtp_buffer_get_seq">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="986">Get the sequence number of the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="992">The sequence number in host order.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="988">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssrc" c:identifier="gst_rtp_buffer_get_ssrc">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="848">Get the SSRC of the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="854">the SSRC of @buffer in host order.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="850">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timestamp" c:identifier="gst_rtp_buffer_get_timestamp">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1013">Get the timestamp of the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1019">The timestamp in host order.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1015">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="gst_rtp_buffer_get_version">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="559">Get the version number of the RTP packet in @buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="565">The version of @buffer.</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="561">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pad_to" c:identifier="gst_rtp_buffer_pad_to">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="615">Set the amount of padding in the RTP packet in @buffer to
@len. If @len is 0, the padding is removed.

NOTE: This function does not work correctly.</doc>
        <source-position filename="gstrtpbuffer.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="617">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="618">the new amount of padding</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_csrc" c:identifier="gst_rtp_buffer_set_csrc">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="910">Modify the CSRC at index @idx in @buffer to @csrc.</doc>
        <source-position filename="gstrtpbuffer.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="912">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="913">the CSRC index to set</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="csrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="914">the CSRC in host order to set at @idx</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extension" c:identifier="gst_rtp_buffer_set_extension">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="654">Set the extension bit on the RTP packet in @buffer to @extension.</doc>
        <source-position filename="gstrtpbuffer.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="656">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="657">the new extension</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_extension_data"
              c:identifier="gst_rtp_buffer_set_extension_data">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="783">Set the extension bit of the rtp buffer and fill in the @bits and @length of the
extension header. If the existing extension data is not large enough, it will
be made larger.</doc>
        <source-position filename="gstrtpbuffer.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="794">True if done.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="785">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="bits" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="786">the bits specific for the extension</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="787">the length that counts the number of 32-bit words in
the extension, excluding the extension header ( therefore zero is a valid length)</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_marker" c:identifier="gst_rtp_buffer_set_marker">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="944">Set the marker bit on the RTP packet in @buffer to @marker.</doc>
        <source-position filename="gstrtpbuffer.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="946">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="947">the new marker</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_packet_len"
              c:identifier="gst_rtp_buffer_set_packet_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="501">Set the total @rtp size to @len. The data in the buffer will be made
larger if needed. Any padding will be removed from the packet.</doc>
        <source-position filename="gstrtpbuffer.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="503">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="504">the new packet length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_padding" c:identifier="gst_rtp_buffer_set_padding">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="602">Set the padding bit on the RTP packet in @buffer to @padding.</doc>
        <source-position filename="gstrtpbuffer.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="604">the buffer</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="padding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="605">the new padding</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_payload_type"
              c:identifier="gst_rtp_buffer_set_payload_type">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="971">Set the payload type of the RTP packet in @buffer to @payload_type.</doc>
        <source-position filename="gstrtpbuffer.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="973">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="payload_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="974">the new type</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_seq" c:identifier="gst_rtp_buffer_set_seq">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1000">Set the sequence number of the RTP packet in @buffer to @seq.</doc>
        <source-position filename="gstrtpbuffer.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1002">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="seq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1003">the new sequence number</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ssrc" c:identifier="gst_rtp_buffer_set_ssrc">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="862">Set the SSRC on the RTP packet in @buffer to @ssrc.</doc>
        <source-position filename="gstrtpbuffer.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="864">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="ssrc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="865">the new SSRC</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timestamp" c:identifier="gst_rtp_buffer_set_timestamp">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1027">Set the timestamp of the RTP packet in @buffer to @timestamp.</doc>
        <source-position filename="gstrtpbuffer.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1029">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1030">the new timestamp</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version" c:identifier="gst_rtp_buffer_set_version">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="573">Set the version of the RTP packet in @buffer to @version.</doc>
        <source-position filename="gstrtpbuffer.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="575">the RTP packet</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="576">the new version</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="unmap" c:identifier="gst_rtp_buffer_unmap">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="479">Unmap @rtp previously mapped with gst_rtp_buffer_map().</doc>
        <source-position filename="gstrtpbuffer.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="rtp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="481">a #GstRTPBuffer</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="allocate_data"
                c:identifier="gst_rtp_buffer_allocate_data">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="84">Allocate enough data in @buffer to hold an RTP packet with @csrc_count CSRCs,
a payload length of @payload_len and padding of @pad_len.
@buffer must be writable and all previous memory in @buffer will be freed.
If @pad_len is &gt;0, the padding bit will be set. All other RTP header fields
will be set to 0/FALSE.</doc>
        <source-position filename="gstrtpbuffer.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="86">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="payload_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="87">the length of the payload</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pad_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="88">the amount of padding</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="csrc_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="89">the number of CSRC entries</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
      <function name="calc_header_len"
                c:identifier="gst_rtp_buffer_calc_header_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="242">Calculate the header length of an RTP packet with @csrc_count CSRC entries.
An RTP packet can have at most 15 CSRC entries.</doc>
        <source-position filename="gstrtpbuffer.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="249">The length of an RTP header with @csrc_count CSRC entries.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="csrc_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="244">the number of CSRC entries</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
      <function name="calc_packet_len"
                c:identifier="gst_rtp_buffer_calc_packet_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="259">Calculate the total length of an RTP packet with a payload size of @payload_len,
a padding of @pad_len and a @csrc_count CSRC entries.</doc>
        <source-position filename="gstrtpbuffer.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="268">The total length of an RTP header with given parameters.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="payload_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="261">the length of the payload</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pad_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="262">the amount of padding</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="csrc_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="263">the number of CSRC entries</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
      <function name="calc_payload_len"
                c:identifier="gst_rtp_buffer_calc_payload_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="280">Calculate the length of the payload of an RTP packet with size @packet_len,
a padding of @pad_len and a @csrc_count CSRC entries.</doc>
        <source-position filename="gstrtpbuffer.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="289">The length of the payload of an RTP packet  with given parameters.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="packet_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="282">the length of the total RTP packet</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pad_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="283">the amount of padding</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="csrc_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="284">the number of CSRC entries</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
      <function name="compare_seqnum"
                c:identifier="gst_rtp_buffer_compare_seqnum">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1205">Compare two sequence numbers, taking care of wraparounds. This function
returns the difference between @seqnum1 and @seqnum2.</doc>
        <source-position filename="gstrtpbuffer.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1213">a negative value if @seqnum1 is bigger than @seqnum2, 0 if they
are equal or a positive value if @seqnum1 is smaller than @segnum2.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="seqnum1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1207">a sequence number</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="seqnum2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1208">a sequence number</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </function>
      <function name="default_clock_rate"
                c:identifier="gst_rtp_buffer_default_clock_rate">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1178">Get the default clock-rate for the static payload type @payload_type.</doc>
        <source-position filename="gstrtpbuffer.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1184">the default clock rate or -1 if the payload type is not static or
the clock-rate is undefined.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <parameter name="payload_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1180">the static payload type</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
      <function name="ext_timestamp"
                c:identifier="gst_rtp_buffer_ext_timestamp">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1222">Update the @exttimestamp field with @timestamp. For the first call of the
method, @exttimestamp should point to a location with a value of -1.

This function makes sure that the returned value is a constantly increasing
value even in the case where there is a timestamp wraparound.</doc>
        <source-position filename="gstrtpbuffer.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1233">The extended timestamp of @timestamp.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <parameter name="exttimestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1224">a previous extended timestamp</doc>
            <type name="guint64" c:type="guint64*"/>
          </parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="1225">a new timestamp</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </function>
      <function name="map" c:identifier="gst_rtp_buffer_map">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="305">Map the contents of @buffer into @rtp.</doc>
        <source-position filename="gstrtpbuffer.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="313">%TRUE if @buffer could be mapped.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="307">a #GstBuffer</doc>
            <type name="Gst.Buffer" c:type="GstBuffer*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="308">#GstMapFlags</doc>
            <type name="Gst.MapFlags" c:type="GstMapFlags"/>
          </parameter>
          <parameter name="rtp"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="309">a #GstRTPBuffer</doc>
            <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_allocate" c:identifier="gst_rtp_buffer_new_allocate">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="189">Allocate a new #GstBuffer with enough data to hold an RTP packet with
@csrc_count CSRCs, a payload length of @payload_len and padding of @pad_len.
All other RTP header fields will be set to 0/FALSE.</doc>
        <source-position filename="gstrtpbuffer.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="199">A newly allocated buffer that can hold an RTP packet with given
parameters.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="payload_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="191">the length of the payload</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pad_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="192">the amount of padding</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="csrc_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="193">the number of CSRC entries</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_allocate_len"
                c:identifier="gst_rtp_buffer_new_allocate_len">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="216">Create a new #GstBuffer that can hold an RTP packet that is exactly
@packet_len long. The length of the payload depends on @pad_len and
@csrc_count and can be calculated with gst_rtp_buffer_calc_payload_len().
All RTP header fields will be set to 0/FALSE.</doc>
        <source-position filename="gstrtpbuffer.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="227">A newly allocated buffer that can hold an RTP packet of @packet_len.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="packet_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="218">the total length of the packet</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="pad_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="219">the amount of padding</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="csrc_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="220">the number of CSRC entries</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_copy_data"
                c:identifier="gst_rtp_buffer_new_copy_data">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="171">Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.</doc>
        <source-position filename="gstrtpbuffer.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="181">A newly allocated buffer with a copy of @data and of size @len.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="173">data for the new
  buffer</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="175">the length of data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_take_data"
                c:identifier="gst_rtp_buffer_new_take_data">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="150">Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.</doc>
        <source-position filename="gstrtpbuffer.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="160">A newly allocated buffer with @data and of size @len.</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="152">
  data for the new buffer</doc>
            <array length="1" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtpbuffer.c"
                 line="154">the length of data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="RTPPayload" c:type="GstRTPPayload">
      <doc xml:space="preserve"
           filename="gstrtppayloads.h"
           line="30">Standard predefined fixed payload types.

The official list is at:
http://www.iana.org/assignments/rtp-parameters

Audio:
reserved: 19
unassigned: 20-23,

Video:
unassigned: 24, 27, 29, 30, 35-71, 77-95
Reserved for RTCP conflict avoidance: 72-76</doc>
      <source-position filename="gstrtppayloads.h" line="107"/>
      <member name="pcmu" value="0" c:identifier="GST_RTP_PAYLOAD_PCMU">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="32">ITU-T G.711. mu-law audio (RFC 3551)</doc>
      </member>
      <member name="1016" value="1" c:identifier="GST_RTP_PAYLOAD_1016">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="33">RFC 3551 says reserved</doc>
      </member>
      <member name="g721" value="2" c:identifier="GST_RTP_PAYLOAD_G721">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="34">RFC 3551 says reserved</doc>
      </member>
      <member name="gsm" value="3" c:identifier="GST_RTP_PAYLOAD_GSM">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="35">GSM audio</doc>
      </member>
      <member name="g723" value="4" c:identifier="GST_RTP_PAYLOAD_G723">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="36">ITU G.723.1 audio</doc>
      </member>
      <member name="dvi4_8000"
              value="5"
              c:identifier="GST_RTP_PAYLOAD_DVI4_8000">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="37">IMA ADPCM wave type (RFC 3551)</doc>
      </member>
      <member name="dvi4_16000"
              value="6"
              c:identifier="GST_RTP_PAYLOAD_DVI4_16000">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="38">IMA ADPCM wave type (RFC 3551)</doc>
      </member>
      <member name="lpc" value="7" c:identifier="GST_RTP_PAYLOAD_LPC">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="39">experimental linear predictive encoding</doc>
      </member>
      <member name="pcma" value="8" c:identifier="GST_RTP_PAYLOAD_PCMA">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="40">ITU-T G.711 A-law audio (RFC 3551)</doc>
      </member>
      <member name="g722" value="9" c:identifier="GST_RTP_PAYLOAD_G722">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="41">ITU-T G.722 (RFC 3551)</doc>
      </member>
      <member name="l16_stereo"
              value="10"
              c:identifier="GST_RTP_PAYLOAD_L16_STEREO">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="42">stereo PCM</doc>
      </member>
      <member name="l16_mono"
              value="11"
              c:identifier="GST_RTP_PAYLOAD_L16_MONO">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="43">mono PCM</doc>
      </member>
      <member name="qcelp" value="12" c:identifier="GST_RTP_PAYLOAD_QCELP">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="44">EIA &amp; TIA standard IS-733</doc>
      </member>
      <member name="cn" value="13" c:identifier="GST_RTP_PAYLOAD_CN">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="45">Comfort Noise (RFC 3389)</doc>
      </member>
      <member name="mpa" value="14" c:identifier="GST_RTP_PAYLOAD_MPA">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="46">Audio MPEG 1-3.</doc>
      </member>
      <member name="g728" value="15" c:identifier="GST_RTP_PAYLOAD_G728">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="47">ITU-T G.728 Speech coder (RFC 3551)</doc>
      </member>
      <member name="dvi4_11025"
              value="16"
              c:identifier="GST_RTP_PAYLOAD_DVI4_11025">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="48">IMA ADPCM wave type (RFC 3551)</doc>
      </member>
      <member name="dvi4_22050"
              value="17"
              c:identifier="GST_RTP_PAYLOAD_DVI4_22050">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="49">IMA ADPCM wave type (RFC 3551)</doc>
      </member>
      <member name="g729" value="18" c:identifier="GST_RTP_PAYLOAD_G729">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="50">ITU-T G.729 Speech coder (RFC 3551)</doc>
      </member>
      <member name="cellb" value="25" c:identifier="GST_RTP_PAYLOAD_CELLB">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="51">See RFC 2029</doc>
      </member>
      <member name="jpeg" value="26" c:identifier="GST_RTP_PAYLOAD_JPEG">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="52">ISO Standards 10918-1 and 10918-2 (RFC 2435)</doc>
      </member>
      <member name="nv" value="28" c:identifier="GST_RTP_PAYLOAD_NV">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="53">nv encoding by Ron Frederick</doc>
      </member>
      <member name="h261" value="31" c:identifier="GST_RTP_PAYLOAD_H261">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="54">ITU-T Recommendation H.261 (RFC 2032)</doc>
      </member>
      <member name="mpv" value="32" c:identifier="GST_RTP_PAYLOAD_MPV">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="55">Video MPEG 1 &amp; 2 (RFC 2250)</doc>
      </member>
      <member name="mp2t" value="33" c:identifier="GST_RTP_PAYLOAD_MP2T">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="56">MPEG-2 transport stream (RFC 2250)</doc>
      </member>
      <member name="h263" value="34" c:identifier="GST_RTP_PAYLOAD_H263">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="57">Video H263 (RFC 2190)</doc>
      </member>
    </enumeration>
    <record name="RTPPayloadInfo" c:type="GstRTPPayloadInfo">
      <doc xml:space="preserve"
           filename="gstrtppayloads.h"
           line="164">Structure holding default payload type information.</doc>
      <source-position filename="gstrtppayloads.h" line="188"/>
      <field name="payload_type" writable="1">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="166">payload type, -1 means dynamic</doc>
        <type name="guint8" c:type="guint8"/>
      </field>
      <field name="media" writable="1">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="167">the media type(s), usually "audio", "video", "application", "text",
"message".</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="encoding_name" writable="1">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="169">the encoding name of @pt</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="clock_rate" writable="1">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="170">default clock rate, 0 = unknown/variable</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="encoding_parameters" writable="1">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="171">encoding parameters. For audio this is the number of
channels. NULL = not applicable.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="bitrate" writable="1">
        <doc xml:space="preserve"
             filename="gstrtppayloads.h"
             line="173">the bitrate of the media. 0 = unknown/variable.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="_gst_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <function name="for_name" c:identifier="gst_rtp_payload_info_for_name">
        <doc xml:space="preserve"
             filename="gstrtppayloads.c"
             line="200">Get the #GstRTPPayloadInfo for @media and @encoding_name. This function is
mostly used to get the default clock-rate and bandwidth for dynamic payload
types specified with @media and @encoding name.

The search for @encoding_name will be performed in a case insensitve way.</doc>
        <source-position filename="gstrtppayloads.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtppayloads.c"
               line="211">a #GstRTPPayloadInfo or NULL when no info could be found.</doc>
          <type name="RTPPayloadInfo" c:type="const GstRTPPayloadInfo*"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtppayloads.c"
                 line="202">the media to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtppayloads.c"
                 line="203">the encoding name to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="for_pt" c:identifier="gst_rtp_payload_info_for_pt">
        <doc xml:space="preserve"
             filename="gstrtppayloads.c"
             line="175">Get the #GstRTPPayloadInfo for @payload_type. This function is
mostly used to get the default clock-rate and bandwidth for static payload
types specified with @payload_type.</doc>
        <source-position filename="gstrtppayloads.h" line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtppayloads.c"
               line="183">a #GstRTPPayloadInfo or NULL when no info could be found.</doc>
          <type name="RTPPayloadInfo" c:type="const GstRTPPayloadInfo*"/>
        </return-value>
        <parameters>
          <parameter name="payload_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gstrtppayloads.c"
                 line="177">the payload_type to find</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <constant name="RTP_HDREXT_BASE"
              value="urn:ietf:params:rtp-hdrext:"
              c:type="GST_RTP_HDREXT_BASE">
      <source-position filename="gstrtphdrext.h" line="30"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_HDREXT_NTP_56"
              value="ntp-56"
              c:type="GST_RTP_HDREXT_NTP_56">
      <source-position filename="gstrtphdrext.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_HDREXT_NTP_56_SIZE"
              value="7"
              c:type="GST_RTP_HDREXT_NTP_56_SIZE">
      <source-position filename="gstrtphdrext.h" line="42"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTP_HDREXT_NTP_64"
              value="ntp-64"
              c:type="GST_RTP_HDREXT_NTP_64">
      <source-position filename="gstrtphdrext.h" line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_HDREXT_NTP_64_SIZE"
              value="8"
              c:type="GST_RTP_HDREXT_NTP_64_SIZE">
      <source-position filename="gstrtphdrext.h" line="35"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTP_PAYLOAD_1016_STRING"
              value="1"
              c:type="GST_RTP_PAYLOAD_1016_STRING">
      <source-position filename="gstrtppayloads.h" line="124"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_CELLB_STRING"
              value="25"
              c:type="GST_RTP_PAYLOAD_CELLB_STRING">
      <source-position filename="gstrtppayloads.h" line="143"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_CN_STRING"
              value="13"
              c:type="GST_RTP_PAYLOAD_CN_STRING">
      <source-position filename="gstrtppayloads.h" line="136"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_DVI4_11025_STRING"
              value="16"
              c:type="GST_RTP_PAYLOAD_DVI4_11025_STRING">
      <source-position filename="gstrtppayloads.h" line="139"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_DVI4_16000_STRING"
              value="6"
              c:type="GST_RTP_PAYLOAD_DVI4_16000_STRING">
      <source-position filename="gstrtppayloads.h" line="129"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_DVI4_22050_STRING"
              value="17"
              c:type="GST_RTP_PAYLOAD_DVI4_22050_STRING">
      <source-position filename="gstrtppayloads.h" line="140"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_DVI4_8000_STRING"
              value="5"
              c:type="GST_RTP_PAYLOAD_DVI4_8000_STRING">
      <source-position filename="gstrtppayloads.h" line="128"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_DYNAMIC_STRING"
              value="[96, 127]"
              c:type="GST_RTP_PAYLOAD_DYNAMIC_STRING">
      <source-position filename="gstrtppayloads.h" line="152"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_G721_STRING"
              value="2"
              c:type="GST_RTP_PAYLOAD_G721_STRING">
      <source-position filename="gstrtppayloads.h" line="125"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_G722_STRING"
              value="9"
              c:type="GST_RTP_PAYLOAD_G722_STRING">
      <source-position filename="gstrtppayloads.h" line="132"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_G723_53"
              value="17"
              c:type="GST_RTP_PAYLOAD_G723_53">
      <source-position filename="gstrtppayloads.h" line="111"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTP_PAYLOAD_G723_53_STRING"
              value="17"
              c:type="GST_RTP_PAYLOAD_G723_53_STRING">
      <source-position filename="gstrtppayloads.h" line="116"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_G723_63"
              value="16"
              c:type="GST_RTP_PAYLOAD_G723_63">
      <source-position filename="gstrtppayloads.h" line="110"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTP_PAYLOAD_G723_63_STRING"
              value="16"
              c:type="GST_RTP_PAYLOAD_G723_63_STRING">
      <source-position filename="gstrtppayloads.h" line="115"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_G723_STRING"
              value="4"
              c:type="GST_RTP_PAYLOAD_G723_STRING">
      <source-position filename="gstrtppayloads.h" line="127"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_G728_STRING"
              value="15"
              c:type="GST_RTP_PAYLOAD_G728_STRING">
      <source-position filename="gstrtppayloads.h" line="138"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_G729_STRING"
              value="18"
              c:type="GST_RTP_PAYLOAD_G729_STRING">
      <source-position filename="gstrtppayloads.h" line="141"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_GSM_STRING"
              value="3"
              c:type="GST_RTP_PAYLOAD_GSM_STRING">
      <source-position filename="gstrtppayloads.h" line="126"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_H261_STRING"
              value="31"
              c:type="GST_RTP_PAYLOAD_H261_STRING">
      <source-position filename="gstrtppayloads.h" line="147"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_H263_STRING"
              value="34"
              c:type="GST_RTP_PAYLOAD_H263_STRING">
      <source-position filename="gstrtppayloads.h" line="150"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_JPEG_STRING"
              value="26"
              c:type="GST_RTP_PAYLOAD_JPEG_STRING">
      <source-position filename="gstrtppayloads.h" line="144"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_L16_MONO_STRING"
              value="11"
              c:type="GST_RTP_PAYLOAD_L16_MONO_STRING">
      <source-position filename="gstrtppayloads.h" line="134"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_L16_STEREO_STRING"
              value="10"
              c:type="GST_RTP_PAYLOAD_L16_STEREO_STRING">
      <source-position filename="gstrtppayloads.h" line="133"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_LPC_STRING"
              value="7"
              c:type="GST_RTP_PAYLOAD_LPC_STRING">
      <source-position filename="gstrtppayloads.h" line="130"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_MP2T_STRING"
              value="33"
              c:type="GST_RTP_PAYLOAD_MP2T_STRING">
      <source-position filename="gstrtppayloads.h" line="149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_MPA_STRING"
              value="14"
              c:type="GST_RTP_PAYLOAD_MPA_STRING">
      <source-position filename="gstrtppayloads.h" line="137"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_MPV_STRING"
              value="32"
              c:type="GST_RTP_PAYLOAD_MPV_STRING">
      <source-position filename="gstrtppayloads.h" line="148"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_NV_STRING"
              value="28"
              c:type="GST_RTP_PAYLOAD_NV_STRING">
      <source-position filename="gstrtppayloads.h" line="145"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_PCMA_STRING"
              value="8"
              c:type="GST_RTP_PAYLOAD_PCMA_STRING">
      <source-position filename="gstrtppayloads.h" line="131"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_PCMU_STRING"
              value="0"
              c:type="GST_RTP_PAYLOAD_PCMU_STRING">
      <source-position filename="gstrtppayloads.h" line="123"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_QCELP_STRING"
              value="12"
              c:type="GST_RTP_PAYLOAD_QCELP_STRING">
      <source-position filename="gstrtppayloads.h" line="135"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_TS41" value="19" c:type="GST_RTP_PAYLOAD_TS41">
      <source-position filename="gstrtppayloads.h" line="113"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTP_PAYLOAD_TS41_STRING"
              value="19"
              c:type="GST_RTP_PAYLOAD_TS41_STRING">
      <source-position filename="gstrtppayloads.h" line="118"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_PAYLOAD_TS48" value="18" c:type="GST_RTP_PAYLOAD_TS48">
      <source-position filename="gstrtppayloads.h" line="112"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="RTP_PAYLOAD_TS48_STRING"
              value="18"
              c:type="GST_RTP_PAYLOAD_TS48_STRING">
      <source-position filename="gstrtppayloads.h" line="117"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RTP_VERSION" value="2" c:type="GST_RTP_VERSION">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.h"
           line="32">The supported RTP version 2.</doc>
      <source-position filename="gstrtpbuffer.h" line="37"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function name="rtcp_buffer_map"
              c:identifier="gst_rtcp_buffer_map"
              moved-to="RTCPBuffer.map">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="236">Open @buffer for reading or writing, depending on @flags. The resulting RTCP
buffer state is stored in @rtcp.</doc>
      <source-position filename="gstrtcpbuffer.h" line="220"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="238">a buffer with an RTCP packet</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="239">flags for the mapping</doc>
          <type name="Gst.MapFlags" c:type="GstMapFlags"/>
        </parameter>
        <parameter name="rtcp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="240">resulting #GstRTCPBuffer</doc>
          <type name="RTCPBuffer" c:type="GstRTCPBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_new"
              c:identifier="gst_rtcp_buffer_new"
              moved-to="RTCPBuffer.new">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="212">Create a new buffer for constructing RTCP packets. The packet will have a
maximum size of @mtu.</doc>
      <source-position filename="gstrtcpbuffer.h" line="218"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="219">A newly allocated buffer.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="mtu" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="214">the maximum mtu size.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_new_copy_data"
              c:identifier="gst_rtcp_buffer_new_copy_data"
              moved-to="RTCPBuffer.new_copy_data">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="73">Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.</doc>
      <source-position filename="gstrtcpbuffer.h" line="213"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="82">A newly allocated buffer with a copy of @data and of size @len.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="75">data for the new buffer</doc>
          <array length="1" zero-terminated="0" c:type="gpointer">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="76">the length of data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_new_take_data"
              c:identifier="gst_rtcp_buffer_new_take_data"
              moved-to="RTCPBuffer.new_take_data">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="49">Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.</doc>
      <source-position filename="gstrtcpbuffer.h" line="212"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="58">A newly allocated buffer with @data and of size @len.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="51">data for the new buffer</doc>
          <array length="1" zero-terminated="0" c:type="gpointer">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="52">the length of data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_validate"
              c:identifier="gst_rtcp_buffer_validate"
              moved-to="RTCPBuffer.validate">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="188">Check if the data pointed to by @buffer is a valid RTCP packet using
gst_rtcp_buffer_validate_data().</doc>
      <source-position filename="gstrtcpbuffer.h" line="216"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="195">TRUE if @buffer is a valid RTCP packet.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="190">the buffer to validate</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_buffer_validate_data"
              c:identifier="gst_rtcp_buffer_validate_data"
              moved-to="RTCPBuffer.validate_data">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="90">Check if the @data and @size point to the data of a valid RTCP (compound)
packet.
Use this function to validate a packet before using the other functions in
this module.</doc>
      <source-position filename="gstrtcpbuffer.h" line="215"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="100">TRUE if the data points to a valid RTCP packet.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="92">the data to validate</doc>
          <array length="1" zero-terminated="0" c:type="guint8*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="93">the length of @data to validate</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_ntp_to_unix" c:identifier="gst_rtcp_ntp_to_unix">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="1874">Converts an NTP time to UNIX nanoseconds. @ntptime can typically be
the NTP time of an SR RTCP message and contains, in the upper 32 bits, the
number of seconds since 1900 and, in the lower 32 bits, the fractional
seconds. The resulting value will be the number of nanoseconds since 1970.</doc>
      <source-position filename="gstrtcpbuffer.h" line="305"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1883">the UNIX time for @ntptime in nanoseconds.</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="ntptime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1876">an NTP timestamp</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_sdes_name_to_type"
              c:identifier="gst_rtcp_sdes_name_to_type">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="1976">Convert @name into a @GstRTCPSDESType. @name is typically a key in a
#GstStructure containing SDES items.</doc>
      <source-position filename="gstrtcpbuffer.h" line="309"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1983">the #GstRTCPSDESType for @name or #GST_RTCP_SDES_PRIV when @name
is a private sdes item.</doc>
        <type name="RTCPSDESType" c:type="GstRTCPSDESType"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1978">a SDES name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_sdes_type_to_name"
              c:identifier="gst_rtcp_sdes_type_to_name">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="1930">Converts @type to the string equivalent. The string is typically used as a
key in a #GstStructure containing SDES items.</doc>
      <source-position filename="gstrtcpbuffer.h" line="308"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1937">the string equivalent of @type</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1932">a #GstRTCPSDESType</doc>
          <type name="RTCPSDESType" c:type="GstRTCPSDESType"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtcp_unix_to_ntp" c:identifier="gst_rtcp_unix_to_ntp">
      <doc xml:space="preserve"
           filename="gstrtcpbuffer.c"
           line="1901">Converts a UNIX timestamp in nanoseconds to an NTP time. The caller should
pass a value with nanoseconds since 1970. The NTP time will, in the upper
32 bits, contain the number of seconds since 1900 and, in the lower 32
bits, the fractional seconds. The resulting value can be used as an ntptime
for constructing SR RTCP packets.</doc>
      <source-position filename="gstrtcpbuffer.h" line="306"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtcpbuffer.c"
             line="1911">the NTP time for @unixtime.</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="unixtime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtcpbuffer.c"
               line="1903">an UNIX timestamp in nanoseconds</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_allocate_data"
              c:identifier="gst_rtp_buffer_allocate_data"
              moved-to="RTPBuffer.allocate_data">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="84">Allocate enough data in @buffer to hold an RTP packet with @csrc_count CSRCs,
a payload length of @payload_len and padding of @pad_len.
@buffer must be writable and all previous memory in @buffer will be freed.
If @pad_len is &gt;0, the padding bit will be set. All other RTP header fields
will be set to 0/FALSE.</doc>
      <source-position filename="gstrtpbuffer.h" line="66"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="86">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="payload_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="87">the length of the payload</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="88">the amount of padding</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="89">the number of CSRC entries</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_calc_header_len"
              c:identifier="gst_rtp_buffer_calc_header_len"
              moved-to="RTPBuffer.calc_header_len">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="242">Calculate the header length of an RTP packet with @csrc_count CSRC entries.
An RTP packet can have at most 15 CSRC entries.</doc>
      <source-position filename="gstrtpbuffer.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="249">The length of an RTP header with @csrc_count CSRC entries.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="csrc_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="244">the number of CSRC entries</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_calc_packet_len"
              c:identifier="gst_rtp_buffer_calc_packet_len"
              moved-to="RTPBuffer.calc_packet_len">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="259">Calculate the total length of an RTP packet with a payload size of @payload_len,
a padding of @pad_len and a @csrc_count CSRC entries.</doc>
      <source-position filename="gstrtpbuffer.h" line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="268">The total length of an RTP header with given parameters.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="payload_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="261">the length of the payload</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="262">the amount of padding</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="263">the number of CSRC entries</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_calc_payload_len"
              c:identifier="gst_rtp_buffer_calc_payload_len"
              moved-to="RTPBuffer.calc_payload_len">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="280">Calculate the length of the payload of an RTP packet with size @packet_len,
a padding of @pad_len and a @csrc_count CSRC entries.</doc>
      <source-position filename="gstrtpbuffer.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="289">The length of the payload of an RTP packet  with given parameters.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="packet_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="282">the length of the total RTP packet</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="283">the amount of padding</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="284">the number of CSRC entries</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_compare_seqnum"
              c:identifier="gst_rtp_buffer_compare_seqnum"
              moved-to="RTPBuffer.compare_seqnum">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="1205">Compare two sequence numbers, taking care of wraparounds. This function
returns the difference between @seqnum1 and @seqnum2.</doc>
      <source-position filename="gstrtpbuffer.h" line="128"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1213">a negative value if @seqnum1 is bigger than @seqnum2, 0 if they
are equal or a positive value if @seqnum1 is smaller than @segnum2.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="seqnum1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1207">a sequence number</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="seqnum2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1208">a sequence number</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_default_clock_rate"
              c:identifier="gst_rtp_buffer_default_clock_rate"
              moved-to="RTPBuffer.default_clock_rate">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="1178">Get the default clock-rate for the static payload type @payload_type.</doc>
      <source-position filename="gstrtpbuffer.h" line="127"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1184">the default clock rate or -1 if the payload type is not static or
the clock-rate is undefined.</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="payload_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1180">the static payload type</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_ext_timestamp"
              c:identifier="gst_rtp_buffer_ext_timestamp"
              moved-to="RTPBuffer.ext_timestamp">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="1222">Update the @exttimestamp field with @timestamp. For the first call of the
method, @exttimestamp should point to a location with a value of -1.

This function makes sure that the returned value is a constantly increasing
value even in the case where there is a timestamp wraparound.</doc>
      <source-position filename="gstrtpbuffer.h" line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="1233">The extended timestamp of @timestamp.</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="exttimestamp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1224">a previous extended timestamp</doc>
          <type name="guint64" c:type="guint64*"/>
        </parameter>
        <parameter name="timestamp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="1225">a new timestamp</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_map"
              c:identifier="gst_rtp_buffer_map"
              moved-to="RTPBuffer.map">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="305">Map the contents of @buffer into @rtp.</doc>
      <source-position filename="gstrtpbuffer.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="313">%TRUE if @buffer could be mapped.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="307">a #GstBuffer</doc>
          <type name="Gst.Buffer" c:type="GstBuffer*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="308">#GstMapFlags</doc>
          <type name="Gst.MapFlags" c:type="GstMapFlags"/>
        </parameter>
        <parameter name="rtp"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="309">a #GstRTPBuffer</doc>
          <type name="RTPBuffer" c:type="GstRTPBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_new_allocate"
              c:identifier="gst_rtp_buffer_new_allocate"
              moved-to="RTPBuffer.new_allocate">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="189">Allocate a new #GstBuffer with enough data to hold an RTP packet with
@csrc_count CSRCs, a payload length of @payload_len and padding of @pad_len.
All other RTP header fields will be set to 0/FALSE.</doc>
      <source-position filename="gstrtpbuffer.h" line="71"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="199">A newly allocated buffer that can hold an RTP packet with given
parameters.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="payload_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="191">the length of the payload</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="192">the amount of padding</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="193">the number of CSRC entries</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_new_allocate_len"
              c:identifier="gst_rtp_buffer_new_allocate_len"
              moved-to="RTPBuffer.new_allocate_len">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="216">Create a new #GstBuffer that can hold an RTP packet that is exactly
@packet_len long. The length of the payload depends on @pad_len and
@csrc_count and can be calculated with gst_rtp_buffer_calc_payload_len().
All RTP header fields will be set to 0/FALSE.</doc>
      <source-position filename="gstrtpbuffer.h" line="72"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="227">A newly allocated buffer that can hold an RTP packet of @packet_len.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="packet_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="218">the total length of the packet</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="pad_len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="219">the amount of padding</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="csrc_count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="220">the number of CSRC entries</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_new_copy_data"
              c:identifier="gst_rtp_buffer_new_copy_data"
              moved-to="RTPBuffer.new_copy_data">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="171">Create a new buffer and set the data to a copy of @len
bytes of @data and the size to @len. The data will be freed when the buffer
is freed.</doc>
      <source-position filename="gstrtpbuffer.h" line="70"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="181">A newly allocated buffer with a copy of @data and of size @len.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="173">data for the new
  buffer</doc>
          <array length="1" zero-terminated="0" c:type="gpointer">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="175">the length of data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_buffer_new_take_data"
              c:identifier="gst_rtp_buffer_new_take_data"
              moved-to="RTPBuffer.new_take_data">
      <doc xml:space="preserve"
           filename="gstrtpbuffer.c"
           line="150">Create a new buffer and set the data and size of the buffer to @data and @len
respectively. @data will be freed when the buffer is unreffed, so this
function transfers ownership of @data to the new buffer.</doc>
      <source-position filename="gstrtpbuffer.h" line="69"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="gstrtpbuffer.c"
             line="160">A newly allocated buffer with @data and of size @len.</doc>
        <type name="Gst.Buffer" c:type="GstBuffer*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="152">
  data for the new buffer</doc>
          <array length="1" zero-terminated="0" c:type="gpointer">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtpbuffer.c"
               line="154">the length of data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_hdrext_get_ntp_56"
              c:identifier="gst_rtp_hdrext_get_ntp_56">
      <doc xml:space="preserve"
           filename="gstrtphdrext.c"
           line="108">Reads the NTP time from the @size NTP-56 extension bytes in @data and store the
result in @ntptime.</doc>
      <source-position filename="gstrtphdrext.h" line="45"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtphdrext.c"
             line="117">%TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="110">the data to read from</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="111">the size of @data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="ntptime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="112">the result NTP time</doc>
          <type name="guint64" c:type="guint64*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_hdrext_get_ntp_64"
              c:identifier="gst_rtp_hdrext_get_ntp_64">
      <doc xml:space="preserve"
           filename="gstrtphdrext.c"
           line="58">Reads the NTP time from the @size NTP-64 extension bytes in @data and store the
result in @ntptime.</doc>
      <source-position filename="gstrtphdrext.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtphdrext.c"
             line="67">%TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="60">the data to read from</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="61">the size of @data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="ntptime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="62">the result NTP time</doc>
          <type name="guint64" c:type="guint64*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_hdrext_set_ntp_56"
              c:identifier="gst_rtp_hdrext_set_ntp_56">
      <doc xml:space="preserve"
           filename="gstrtphdrext.c"
           line="81">Writes the NTP time in @ntptime to the format required for the NTP-56 header
extension. @data must hold at least #GST_RTP_HDREXT_NTP_56_SIZE bytes.</doc>
      <source-position filename="gstrtphdrext.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtphdrext.c"
             line="90">%TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="83">the data to write to</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="84">the size of @data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="ntptime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="85">the NTP time</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_hdrext_set_ntp_64"
              c:identifier="gst_rtp_hdrext_set_ntp_64">
      <doc xml:space="preserve"
           filename="gstrtphdrext.c"
           line="36">Writes the NTP time in @ntptime to the format required for the NTP-64 header
extension. @data must hold at least #GST_RTP_HDREXT_NTP_64_SIZE bytes.</doc>
      <source-position filename="gstrtphdrext.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtphdrext.c"
             line="45">%TRUE on success.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="38">the data to write to</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="39">the size of @data</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="ntptime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtphdrext.c"
               line="40">the NTP time</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_payload_info_for_name"
              c:identifier="gst_rtp_payload_info_for_name"
              moved-to="RTPPayloadInfo.for_name">
      <doc xml:space="preserve"
           filename="gstrtppayloads.c"
           line="200">Get the #GstRTPPayloadInfo for @media and @encoding_name. This function is
mostly used to get the default clock-rate and bandwidth for dynamic payload
types specified with @media and @encoding name.

The search for @encoding_name will be performed in a case insensitve way.</doc>
      <source-position filename="gstrtppayloads.h" line="191"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtppayloads.c"
             line="211">a #GstRTPPayloadInfo or NULL when no info could be found.</doc>
        <type name="RTPPayloadInfo" c:type="const GstRTPPayloadInfo*"/>
      </return-value>
      <parameters>
        <parameter name="media" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtppayloads.c"
               line="202">the media to find</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="encoding_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtppayloads.c"
               line="203">the encoding name to find</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="rtp_payload_info_for_pt"
              c:identifier="gst_rtp_payload_info_for_pt"
              moved-to="RTPPayloadInfo.for_pt">
      <doc xml:space="preserve"
           filename="gstrtppayloads.c"
           line="175">Get the #GstRTPPayloadInfo for @payload_type. This function is
mostly used to get the default clock-rate and bandwidth for static payload
types specified with @payload_type.</doc>
      <source-position filename="gstrtppayloads.h" line="190"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gstrtppayloads.c"
             line="183">a #GstRTPPayloadInfo or NULL when no info could be found.</doc>
        <type name="RTPPayloadInfo" c:type="const GstRTPPayloadInfo*"/>
      </return-value>
      <parameters>
        <parameter name="payload_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gstrtppayloads.c"
               line="177">the payload_type to find</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
